"use strict";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorFromName = exports.errorFromCode = exports.AccountNotFoundError = exports.UnknownAccountError = exports.MintStateLockedError = exports.InvalidLockedByError = exports.InvalidPolicyMintAssociationError = exports.InvalidPolicyEvaluationError = exports.InvalidPolicyCreationError = exports.InvalidAuthorityError = exports.InvalidTokenAccountError = exports.InvalidMetadataError = exports.InvalidMintError = void 0;
const createErrorFromCodeLookup = new Map();
const createErrorFromNameLookup = new Map();
/**
 * InvalidMint: 'Invalid mint'
 *
 * @category Errors
 * @category generated
 */
class InvalidMintError extends Error {
    constructor() {
        super('Invalid mint');
        this.code = 0x1770;
        this.name = 'InvalidMint';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidMintError);
        }
    }
}
exports.InvalidMintError = InvalidMintError;
createErrorFromCodeLookup.set(0x1770, () => new InvalidMintError());
createErrorFromNameLookup.set('InvalidMint', () => new InvalidMintError());
/**
 * InvalidMetadata: 'Invalid metadata'
 *
 * @category Errors
 * @category generated
 */
class InvalidMetadataError extends Error {
    constructor() {
        super('Invalid metadata');
        this.code = 0x1771;
        this.name = 'InvalidMetadata';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidMetadataError);
        }
    }
}
exports.InvalidMetadataError = InvalidMetadataError;
createErrorFromCodeLookup.set(0x1771, () => new InvalidMetadataError());
createErrorFromNameLookup.set('InvalidMetadata', () => new InvalidMetadataError());
/**
 * InvalidTokenAccount: 'Invalid token account'
 *
 * @category Errors
 * @category generated
 */
class InvalidTokenAccountError extends Error {
    constructor() {
        super('Invalid token account');
        this.code = 0x1772;
        this.name = 'InvalidTokenAccount';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidTokenAccountError);
        }
    }
}
exports.InvalidTokenAccountError = InvalidTokenAccountError;
createErrorFromCodeLookup.set(0x1772, () => new InvalidTokenAccountError());
createErrorFromNameLookup.set('InvalidTokenAccount', () => new InvalidTokenAccountError());
/**
 * InvalidAuthority: 'Invalid authority address'
 *
 * @category Errors
 * @category generated
 */
class InvalidAuthorityError extends Error {
    constructor() {
        super('Invalid authority address');
        this.code = 0x1773;
        this.name = 'InvalidAuthority';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidAuthorityError);
        }
    }
}
exports.InvalidAuthorityError = InvalidAuthorityError;
createErrorFromCodeLookup.set(0x1773, () => new InvalidAuthorityError());
createErrorFromNameLookup.set('InvalidAuthority', () => new InvalidAuthorityError());
/**
 * InvalidPolicyCreation: 'Invalid policy creation'
 *
 * @category Errors
 * @category generated
 */
class InvalidPolicyCreationError extends Error {
    constructor() {
        super('Invalid policy creation');
        this.code = 0x1774;
        this.name = 'InvalidPolicyCreation';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidPolicyCreationError);
        }
    }
}
exports.InvalidPolicyCreationError = InvalidPolicyCreationError;
createErrorFromCodeLookup.set(0x1774, () => new InvalidPolicyCreationError());
createErrorFromNameLookup.set('InvalidPolicyCreation', () => new InvalidPolicyCreationError());
/**
 * InvalidPolicyEvaluation: 'Invalid policy evaluation'
 *
 * @category Errors
 * @category generated
 */
class InvalidPolicyEvaluationError extends Error {
    constructor() {
        super('Invalid policy evaluation');
        this.code = 0x1775;
        this.name = 'InvalidPolicyEvaluation';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidPolicyEvaluationError);
        }
    }
}
exports.InvalidPolicyEvaluationError = InvalidPolicyEvaluationError;
createErrorFromCodeLookup.set(0x1775, () => new InvalidPolicyEvaluationError());
createErrorFromNameLookup.set('InvalidPolicyEvaluation', () => new InvalidPolicyEvaluationError());
/**
 * InvalidPolicyMintAssociation: 'Invalid policy mint association'
 *
 * @category Errors
 * @category generated
 */
class InvalidPolicyMintAssociationError extends Error {
    constructor() {
        super('Invalid policy mint association');
        this.code = 0x1776;
        this.name = 'InvalidPolicyMintAssociation';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidPolicyMintAssociationError);
        }
    }
}
exports.InvalidPolicyMintAssociationError = InvalidPolicyMintAssociationError;
createErrorFromCodeLookup.set(0x1776, () => new InvalidPolicyMintAssociationError());
createErrorFromNameLookup.set('InvalidPolicyMintAssociation', () => new InvalidPolicyMintAssociationError());
/**
 * InvalidLockedBy: 'Invalid locked by'
 *
 * @category Errors
 * @category generated
 */
class InvalidLockedByError extends Error {
    constructor() {
        super('Invalid locked by');
        this.code = 0x1777;
        this.name = 'InvalidLockedBy';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidLockedByError);
        }
    }
}
exports.InvalidLockedByError = InvalidLockedByError;
createErrorFromCodeLookup.set(0x1777, () => new InvalidLockedByError());
createErrorFromNameLookup.set('InvalidLockedBy', () => new InvalidLockedByError());
/**
 * MintStateLocked: 'Mint state is locked'
 *
 * @category Errors
 * @category generated
 */
class MintStateLockedError extends Error {
    constructor() {
        super('Mint state is locked');
        this.code = 0x1778;
        this.name = 'MintStateLocked';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, MintStateLockedError);
        }
    }
}
exports.MintStateLockedError = MintStateLockedError;
createErrorFromCodeLookup.set(0x1778, () => new MintStateLockedError());
createErrorFromNameLookup.set('MintStateLocked', () => new MintStateLockedError());
/**
 * UnknownAccount: 'Unknown account found in instruction'
 *
 * @category Errors
 * @category generated
 */
class UnknownAccountError extends Error {
    constructor() {
        super('Unknown account found in instruction');
        this.code = 0x1779;
        this.name = 'UnknownAccount';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, UnknownAccountError);
        }
    }
}
exports.UnknownAccountError = UnknownAccountError;
createErrorFromCodeLookup.set(0x1779, () => new UnknownAccountError());
createErrorFromNameLookup.set('UnknownAccount', () => new UnknownAccountError());
/**
 * AccountNotFound: 'Account not found in instruction'
 *
 * @category Errors
 * @category generated
 */
class AccountNotFoundError extends Error {
    constructor() {
        super('Account not found in instruction');
        this.code = 0x177a;
        this.name = 'AccountNotFound';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, AccountNotFoundError);
        }
    }
}
exports.AccountNotFoundError = AccountNotFoundError;
createErrorFromCodeLookup.set(0x177a, () => new AccountNotFoundError());
createErrorFromNameLookup.set('AccountNotFound', () => new AccountNotFoundError());
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
function errorFromCode(code) {
    const createError = createErrorFromCodeLookup.get(code);
    return createError != null ? createError() : null;
}
exports.errorFromCode = errorFromCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
function errorFromName(name) {
    const createError = createErrorFromNameLookup.get(name);
    return createError != null ? createError() : null;
}
exports.errorFromName = errorFromName;
