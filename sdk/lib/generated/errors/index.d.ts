/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
declare type ErrorWithCode = Error & {
    code: number;
};
declare type MaybeErrorWithCode = ErrorWithCode | null | undefined;
/**
 * InvalidMint: 'Invalid mint'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidMintError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidMetadata: 'Invalid metadata'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidMetadataError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidTokenAccount: 'Invalid token account'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidTokenAccountError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidAuthority: 'Invalid authority address'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidAuthorityError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidPolicyCreation: 'Invalid policy creation'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidPolicyCreationError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidPolicyEvaluation: 'Invalid policy evaluation'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidPolicyEvaluationError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidPolicyMintAssociation: 'Invalid policy mint association'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidPolicyMintAssociationError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidLockedBy: 'Invalid locked by'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidLockedByError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * MintStateLocked: 'Mint state is locked'
 *
 * @category Errors
 * @category generated
 */
export declare class MintStateLockedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * UnknownAccount: 'Unknown account found in instruction'
 *
 * @category Errors
 * @category generated
 */
export declare class UnknownAccountError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * AccountNotFound: 'Account not found in instruction'
 *
 * @category Errors
 * @category generated
 */
export declare class AccountNotFoundError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export declare function errorFromCode(code: number): MaybeErrorWithCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export declare function errorFromName(name: string): MaybeErrorWithCode;
export {};
