/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { InitPolicyArg } from '../types/InitPolicyArg';
/**
 * @category Instructions
 * @category InitPolicy
 * @category generated
 */
export declare type InitPolicyInstructionArgs = {
    arg: InitPolicyArg;
};
/**
 * @category Instructions
 * @category InitPolicy
 * @category generated
 */
export declare const initPolicyStruct: beet.FixableBeetArgsStruct<InitPolicyInstructionArgs & {
    instructionDiscriminator: number[];
}>;
/**
 * Accounts required by the _initPolicy_ instruction
 *
 * @property [_writable_] policy
 * @property [_writable_, **signer**] authority
 * @category Instructions
 * @category InitPolicy
 * @category generated
 */
export declare type InitPolicyInstructionAccounts = {
    policy: web3.PublicKey;
    authority: web3.PublicKey;
    systemProgram?: web3.PublicKey;
};
export declare const initPolicyInstructionDiscriminator: number[];
/**
 * Creates a _InitPolicy_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitPolicy
 * @category generated
 */
export declare function createInitPolicyInstruction(accounts: InitPolicyInstructionAccounts, args: InitPolicyInstructionArgs, programId?: web3.PublicKey): web3.TransactionInstruction;
